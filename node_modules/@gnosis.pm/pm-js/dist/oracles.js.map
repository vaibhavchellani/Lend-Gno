{"version":3,"sources":["../src/oracles.js"],"names":["ipfsHashLength","createCentralizedOracle","self","callerContract","contracts","CentralizedOracleFactory","methodName","eventName","eventArgName","resultContract","CentralizedOracle","validators","ipfsHash","length","Error","createUltimateOracle","UltimateOracleFactory","UltimateOracle","argAliases","forwardedOracle"],"mappings":";;;;;;;;;;;AAAA;;;;AAEA,IAAMA,iBAAiB,EAAvB;;AAEA;;;;;;;;;;AAUO,IAAMC,4DAA0B,6BAAiB,UAACC,IAAD;AAAA,WAAW;AAC/DC,wBAAgBD,KAAKE,SAAL,CAAeC,wBADgC;AAE/DC,oBAAY,yBAFmD;AAG/DC,mBAAW,2BAHoD;AAI/DC,sBAAc,mBAJiD;AAK/DC,wBAAgBP,KAAKE,SAAL,CAAeM,iBALgC;AAM/DC,oBAAY,CACR,gBAAgB;AAAA;AAAA,gBAAdC,QAAc;;AACZ,gBAAGA,SAASC,MAAT,KAAoBb,cAAvB,EACI,MAAM,IAAIc,KAAJ,wBAA+BF,QAA/B,wBAA0DZ,cAA1D,CAAN;AACP,SAJO;AANmD,KAAX;AAAA,CAAjB,CAAhC;;AAcP;;;;;;;;;;;;;;;AAeO,IAAMe,sDAAuB,6BAAiB,UAACb,IAAD;AAAA,WAAW;AAC5DC,wBAAgBD,KAAKE,SAAL,CAAeY,qBAD6B;AAE5DV,oBAAY,sBAFgD;AAG5DC,mBAAW,wBAHiD;AAI5DC,sBAAc,gBAJ8C;AAK5DC,wBAAgBP,KAAKE,SAAL,CAAea,cAL6B;AAM5DC,oBAAY;AACRC,6BAAiB;AADT;AANgD,KAAX;AAAA,CAAjB,CAA7B","file":"oracles.js","sourcesContent":["import { wrapWeb3Function } from './utils'\n\nconst ipfsHashLength = 46\n\n/**\n * Creates a centralized oracle linked to a published event.\n *\n * Note: this method is asynchronous and will return a Promise\n *\n * @function\n * @param {string} ipfsHash - The published event's IPFS hash\n * @returns {Contract} The created centralized oracle contract instance\n * @alias Gnosis#createCentralizedOracle\n */\nexport const createCentralizedOracle = wrapWeb3Function((self) => ({\n    callerContract: self.contracts.CentralizedOracleFactory,\n    methodName: 'createCentralizedOracle',\n    eventName: 'CentralizedOracleCreation',\n    eventArgName: 'centralizedOracle',\n    resultContract: self.contracts.CentralizedOracle,\n    validators: [\n        ([ipfsHash]) => {\n            if(ipfsHash.length !== ipfsHashLength)\n                throw new Error(`expected ipfsHash ${ipfsHash} to have length ${ipfsHashLength}`)\n        }\n    ]\n}))\n\n/**\n * Creates an ultimate oracle.\n *\n * Note: this method is asynchronous and will return a Promise\n *\n * @function\n * @param {Contract|string} opts.forwardedOracle - The forwarded oracle contract or its address\n * @param {Contract|string} opts.collateralToken - The collateral token contract or its address\n * @param {number|string|BigNumber} opts.spreadMultiplier - The spread multiplier\n * @param {number|string|BigNumber} opts.challengePeriod - The challenge period in seconds\n * @param {number|string|BigNumber} opts.challengeAmount - The amount of collateral tokens put at stake in the challenge\n * @param {number|string|BigNumber} opts.frontRunnerPeriod - The front runner period in seconds\n * @returns {Contract} The created ultimate oracle contract instance\n * @alias Gnosis#createUltimateOracle\n */\nexport const createUltimateOracle = wrapWeb3Function((self) => ({\n    callerContract: self.contracts.UltimateOracleFactory,\n    methodName: 'createUltimateOracle',\n    eventName: 'UltimateOracleCreation',\n    eventArgName: 'ultimateOracle',\n    resultContract: self.contracts.UltimateOracle,\n    argAliases: {\n        forwardedOracle: 'oracle'\n    }\n}))\n"]}